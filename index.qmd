---
title: "Regulatory Repositories"
author:
  - name: "<span>Coline Zeballos</span> <span style='font-style: italic; margin-left: 0.5em;'><a href='http://www.roche.com'>Roche</a></span>"
  - name: "<span>Yann Féat</span> <span style='font-style: italic; margin-left: 0.5em;'><a href='http://mainanalytics.de'>mainanalytics</a></span>"
reference-location: margin
---



## A Universal Conundrum {.scrollable}

_There are `n` packages for `x`, which one is the best?[^1]_

![](resources/choosing_a_package.png)

[^1]: [https://stackoverflow.com/questions/28650957]()

::: {.notes}
Coline

- A typical "first analysis" question
- Immediately need to make a decision about which packages to use: base R, `dplyr` or `data.table`
- Which one is right for me?
:::



## A Universal Conundrum

### By choosing packages, we're choosing our [^2]

* Feature set
* Dependency footprint
* Integration with other packages
* Preferred lifecycle management of our tools
* Community that we can lean on for help

[^2]: [It depends: A dialog about dependencies, Jim Hester (2019)](https://www.jimhester.com/talk/2019-rsc-deps/)



## A Universal Conundrum

### Regulated Industries: Justification as a Requirement

![](resources/white_paper_guidelines.png)




## Goals

- Provide a community-maintained catalog of package quality indicators ("risk metrics")
- Serve quality indicators in a standard format
- Thoroughly document the system used to perform quality assessment
- Demonstrate how regulatory-ready risk assessments can be provided using public quality indicators
- Serve subsets of packages that conform to a specified risk tolerance
- Improve transparency of industry R package adoption, endorsement and regulator interaction

::: {.notes}
Coline
:::

## An evolving R ecosystem

- (NOTE: show interaction between CRAN, RVH Reg R Repo (us), RC Submissions WG, RC Repositories WG, pharmaverse, other?)

# Stage 0 overview

![](resources/wizare_of_oz_demo.png)

# Interacting with the repo

## Packages risk filters

::: columns
::: {.column width="50%"}

- Helper package for system administrators
- Restricts packages available for installation to those fitting a policy
- Uses packages metadata in the repo
- May be used together with manual checks (e.g., read a statistical review)
:::
::: {.column width="50%"}
```{mermaid}
flowchart TD
  A[All packages] --> B{Code\n coverage\n > 95%?}
  B -- Yes --> C{Has\n doc.?}
  C -- Yes --> D(Available for safety-critical activities)
```
:::
:::

::: {.notes}
Yann
:::

## Usage

```{r}
#| echo: false
summarize_available_packages <- function(ap) {
  out <- cbind(ap, data.frame("..." = "..."))
  out <- out[c(1:4, nrow(ap)), c("Package", "...")]
  out[4,] <- c("...", "...")
  rownames(out) <- c("1", "2", "3", "...", nrow(ap))
  out
}
```

::: columns
::: {.column width="50%"}
### Unfiltered
```{r}
#| echo: true
#| eval: false
available.packages()
```
```{r}
#| echo: false
pkgs_nofltr_path <- file.path(here::here(), "resources", "pkgs_nofltr.rds")
pkgs_nofltr <- readRDS(file = pkgs_nofltr_path)
summarize_available_packages(pkgs_nofltr)
```
:::

::: {.column width="50%"}
### Filtered
```{r}
#| echo: true
#| eval: false
fltr <- risk_filter(covr_coverage > 0.95
  && has_vignettes)
options(available_packages_filters = fltr)
available.packages()
```
```{r}
#| echo: false
pkgs_fltr_path <- file.path(here::here(), "resources", "pkgs_fltr.rds")
pkgs_fltr <- readRDS(file = pkgs_fltr_path)
summarize_available_packages(pkgs_fltr)
```
:::
:::

::: {.notes}
Yann
:::

# Repository ‘back-end’

## Infrastructure setup

::: columns
::: {.column width="50%"}
- Hosts risk assessment metadata
- Integrates with `pak::pkg_install`
- Supports multiple levels of risk tolerance
- Should allow for reproducible package installation to support historical analysis (snapshot, etc.)
:::

::: {.column width="50%"}
DCF file forked from ``r-hub/repo``
```{.yaml}
Package: bslib
Version: 0.6.1
Depends: R (>= 2.10), R (>= 4.4), R (< 4.4.99)
License: MIT + file LICENSE
Built: R 4.4.0; ; 2023-11-29 16:39:06 UTC; unix
RVersion: 4.4
Platform: x86_64-pc-linux-gnu-ubuntu-22.04
Imports: base64enc, cachem, grDevices, htmltools (>= 0.5.7), jquerylib (>= 0.1.3),
         jsonlite, lifecycle, memoise (>= 2.0.1), mime, rlang, sass (>= 0.4.0)
...
```
Added fields for risk-based assessment
```{.yaml code-line-numbers="4-5"}
riskmetric_run_date: 2023-06-21
riskmetric_version: 0.2.1
pkg_score: 0.291481580696657
covr_coverage: 0.852820470987098
has_vignettes: 1
remote_checks: 0.846153846153846
...
```
:::
:::

::: {.notes}
Yann
:::

## Packages cohort validation workflow

### Risk assessment pipeline

- Calculate package QA metadata on updated packages and their reverse dependencies
- Produces logs and other reproducibility data
- Should be able to additionally run on private infrastructure

::: {.notes}
Yann
:::

## Packages cohort validation workflow

```{dot}
digraph D {
  node [shape=plaintext fontname="Sans serif" fontsize="30"];

  pkg_1 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_1</b></td></tr>
     <tr><td align="left">Version: 1.15</td></tr>
     <tr><td align="left">covr_coverage: 0.967</td></tr>
     <tr><td align="left">has_vignettes: 1</td></tr>
     <tr><td align="left">pkg_score: 0.359</td></tr>
   </table>>];
   
  pkg_2 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_2</b></td></tr>
     <tr><td align="left">Version: 3.5</td></tr>
     <tr><td align="left">covr_coverage: 0.984</td></tr>
     <tr><td align="left">has_vignettes: 1</td></tr>
     <tr><td align="left">pkg_score: 0.154</td></tr>
   </table>>];
   
  pkg_3 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_3</b></td></tr>
     <tr><td align="left">Version: 1.9</td></tr>
     <tr><td align="left">covr_coverage: 0.992</td></tr>
     <tr><td align="left">has_vignettes: 1</td></tr>
     <tr><td align="left">pkg_score: 0.312</td></tr>
   </table>>];
   
  pkg_4 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_4</b></td></tr>
     <tr><td align="left">Version: 0.5</td></tr>
     <tr><td align="left">covr_coverage: 0.864</td></tr>
     <tr><td align="left">has_vignettes: 0</td></tr>
     <tr><td align="left">pkg_score: 0.414</td></tr>
   </table>>];
   
  pkg_5 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_5</b></td></tr>
     <tr><td align="left">Version: 4.2</td></tr>
     <tr><td align="left">covr_coverage: 0.924</td></tr>
     <tr><td align="left">has_vignettes: 1</td></tr>
     <tr><td align="left">pkg_score: 0.234</td></tr>
   </table>>];

  pkg_2 -> pkg_1;
  pkg_3 -> pkg_1;
  pkg_3 -> pkg_2;
  pkg_5 -> pkg_4;
}
```

::: {.notes}
Yann
:::

## Packages cohort validation workflow

```{dot}
digraph D {
  node [shape=plaintext fontname="Sans serif" fontsize="30"];

  pkg_1 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_1</b></td></tr>
     <tr><td align="left">Version: 1.15</td></tr>
     <tr><td align="left">covr_coverage: <b><font color="darkgreen">...</font></b>      </td></tr>
     <tr><td align="left">has_vignettes: <b><font color="darkgreen">...</font></b>      </td></tr>
     <tr><td align="left">pkg_score: <b><font color="darkgreen">...</font></b>      </td></tr>
   </table>>];
   
  pkg_2 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_2</b></td></tr>
     <tr><td align="left">Version: <b><font color="darkgreen">3.6</font></b></td></tr>
     <tr><td align="left">covr_coverage: <b><font color="darkgreen">...</font></b>      </td></tr>
     <tr><td align="left">has_vignettes: <b><font color="darkgreen">...</font></b>      </td></tr>
     <tr><td align="left">pkg_score: <b><font color="darkgreen">...</font></b>      </td></tr>
   </table>>];
   
  pkg_3 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_3</b></td></tr>
     <tr><td align="left">Version: 1.9</td></tr>
     <tr><td align="left">covr_coverage: 0.992</td></tr>
     <tr><td align="left">has_vignettes: 1</td></tr>
     <tr><td align="left">pkg_score: 0.312</td></tr>
   </table>>];
   
  pkg_4 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_4</b></td></tr>
     <tr><td align="left">Version: 0.5</td></tr>
     <tr><td align="left">covr_coverage: 0.864</td></tr>
     <tr><td align="left">has_vignettes: 0</td></tr>
     <tr><td align="left">pkg_score: 0.414</td></tr>
   </table>>];
   
  pkg_5 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_5</b></td></tr>
     <tr><td align="left">Version: 4.2</td></tr>
     <tr><td align="left">covr_coverage: 0.924</td></tr>
     <tr><td align="left">has_vignettes: 1</td></tr>
     <tr><td align="left">pkg_score: 0.234</td></tr>
   </table>>];

  pkg_2 -> pkg_1;
  pkg_3 -> pkg_1;
  pkg_3 -> pkg_2;
  pkg_5 -> pkg_4;
}
```

::: {.notes}
Yann
:::

## Packages cohort validation workflow

```{dot}
digraph D {
  node [shape=plaintext fontname="Sans serif" fontsize="30"];

  pkg_1 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_1</b></td></tr>
     <tr><td align="left">Version: 1.15</td></tr>
     <tr><td align="left">covr_coverage: <b><font color="darkgreen">0.967</font></b></td></tr>
     <tr><td align="left">has_vignettes: <b><font color="darkgreen">1</font></b></td></tr>
     <tr><td align="left">pkg_score: <b><font color="darkgreen">0.314</font></b></td></tr>
   </table>>];
   
  pkg_2 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_2</b></td></tr>
     <tr><td align="left">Version: <b><font color="darkgreen">3.6</font></b></td></tr>
     <tr><td align="left">covr_coverage: <b><font color="darkgreen">0.987</font></b></td></tr>
     <tr><td align="left">has_vignettes: <b><font color="darkgreen">1</font></b></td></tr>
     <tr><td align="left">pkg_score: <b><font color="darkgreen">0.148</font></b></td></tr>
   </table>>];
   
  pkg_3 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_3</b></td></tr>
     <tr><td align="left">Version: 1.9</td></tr>
     <tr><td align="left">covr_coverage: 0.992</td></tr>
     <tr><td align="left">has_vignettes: 1</td></tr>
     <tr><td align="left">pkg_score: 0.312</td></tr>
   </table>>];
   
  pkg_4 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_4</b></td></tr>
     <tr><td align="left">Version: 0.5</td></tr>
     <tr><td align="left">covr_coverage: 0.864</td></tr>
     <tr><td align="left">has_vignettes: 0</td></tr>
     <tr><td align="left">pkg_score: 0.414</td></tr>
   </table>>];
   
  pkg_5 [ label=<
   <table border="1" cellborder="0" cellspacing="1">
     <tr><td align="left"><b>pkg_5</b></td></tr>
     <tr><td align="left">Version: 4.2</td></tr>
     <tr><td align="left">covr_coverage: 0.924</td></tr>
     <tr><td align="left">has_vignettes: 1</td></tr>
     <tr><td align="left">pkg_score: 0.234</td></tr>
   </table>>];

  pkg_2 -> pkg_1;
  pkg_3 -> pkg_1;
  pkg_3 -> pkg_2;
  pkg_5 -> pkg_4;
}
```

::: {.notes}
Yann
:::

## Implementation: get new releases from Github

```{.r echo=TRUE eval=FALSE code-line-numbers="2,4-6,8,12-14,25"}
i <- 1
df_releases <- dplyr::tibble()
for (i in seq_along(gh_repos)) {
  user_repo_i <- gh_repos[i]
  url_old_i <- packages_old[i, "DownloadURL"]
  name_old_i <- packages_old[i, "File"]

  # fetch release assets from the Github API
  j <- 1
  ls_releases_i <- list()
  repeat {
    ls_releases_ij <- gh(sprintf("GET /repos/%s/releases", user_repo_i),
      per_page = 100, page = j
    )
    if (length(ls_releases_ij) == 0) {
      break
    }
    ls_releases_i <- c(ls_releases_i, ls_releases_ij)
    if (length(ls_releases_ij) < 100) {
      break
    }
    j <- j + 1
  }

  # add the list of release assets to a data frame
  df_releases <- ls_releases_i %>%
    lapply(function(ls_releases_ij) {
      lapply(ls_releases_ij[["assets"]], function(asset) {
        asset["uploader"] <- NULL
        asset
      }) %>%
        dplyr::bind_rows()
    }) %>%
    dplyr::bind_rows() %>%
    dplyr::mutate(
      user_repo = user_repo_i,
      url_old = url_old_i,
      name_old = name_old_i
    ) %>%
    rbind(df_releases)
}
```

## Implementation: post-process the results

```{.r echo=TRUE eval=FALSE code-line-numbers="1,7-9,14-16,23"}
df_cmp_releases <- df_releases %>%
  dplyr::select(
    user_repo, name, created_at, browser_download_url, url_old,
    name_old
  ) %>%
  dplyr::rename(url = browser_download_url) %>%
  dplyr::filter(stringr::str_detect(
    .$name, stringr::coll("R4.4_x86_64-pc-linux-gnu-ubuntu-22.04")
  )) %>%
  dplyr::mutate(
    created_at = lubridate::as_datetime(created_at, format = "%Y-%Om-%dT%H:%M:%SZ"),
    libc = stringr::str_detect(url, "\\-libc")
  ) %>%
  dplyr::arrange(user_repo, libc, dplyr::desc(created_at)) %>%
  dplyr::group_by(user_repo) %>%
  dplyr::slice_head(n = 1) %>%
  dplyr::ungroup() %>%
  dplyr::mutate(
    pkg = stringr::str_split_i(user_repo, "/", 2),
    ver = stringr::str_split_i(name, "_", 2),
    ver_old = stringr::str_extract(url_old, "download/(.+)/", group = 1)
  ) %>%
  dplyr::select(pkg, name, name_old, ver, ver_old, url)
```

## Implementation: update metrics

```{.r echo=TRUE eval=FALSE code-line-numbers="1-2,10-13,19"}
df_pkg_diff <- df_cmp_releases %>%
  dplyr::filter(ver != ver_old)

if (nrow(df_pkg_diff)) {
  # calculate risk metrics

  opt_repos_init <- getOption("repos")
  options(repos = c("CRAN" = "https://cran.rstudio.com"))

  df_pkg_metrics <- df_pkg_diff$pkg %>%
    riskmetric::pkg_ref(source = "pkg_cran_remote") %>%
    riskmetric::pkg_assess() %>%
    riskmetric::pkg_score() %>%
    cbind(df_pkg_diff) %>%
    dplyr::select(-c(pkg, ver, pkg_ref))

  options(repos = opt_repos_init)

  # replace PACKAGES file
  
  # ...
}
```

::: {.notes}
Yann
:::

# Our roadmap

## What's next

![](resources/stage-1.png)

## Reference container image(s)

- Should mimic environments of companies and health authority reviewers
- Integrates with most modern analytic workbench tools and an evaluation pipeline
- To be used by the Regulatory R Repository for packages cohort validation

# Closing

## R Consortium Impact

<div class="image-container">
  <img src="resources/r-ladies-logo.png">
  <img src="resources/latinr-logo.png">
  <img src="resources/r-medicine-logo.png">
  <img src="resources/useR-logo.png">
  <img src="resources/covid-19-data-forum.png">
</div>

<style>
.image-container {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.image-container img {
  margin: 5px;
  max-width: 150px;  /* Adjust the size of the images as needed */
}
</style>

* Community Grants and Sponsorships Over USD $1.4 Million
* Organize large scale collaborative projects: R Validation Hub, R-Ladies
* Co-host multidisciplinary data science forums: Stanford Data Institute
* Direct support for key R events: R/Medicine, R/Pharma, useR!, LatinR, more
* Direct worldwide support for R User Groups

## Join us

![](resources/rc-logo.png){width=300}

* Help guide the future direction of the R language
* Collaborate on cross industry initiatives
* Raise your leadership profile in the R Community
* Protect your investment in R while supporting the common good

* (NOTE: link to GH join us issue, add R Consortium info)


## Thank you

* (NOTE: list of Core team members)
